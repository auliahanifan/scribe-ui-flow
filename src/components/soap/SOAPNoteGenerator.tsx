import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Separator } from '@/components/ui/separator';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Loader2, FileText, AlertTriangle, CheckCircle, Copy, Download } from 'lucide-react';
import { openaiSOAPService, SOAPGenerationResponse } from '@/lib/services/openai-soap-service';
import { useToast } from '@/hooks/use-toast';

interface SOAPNoteGeneratorProps {
  transcription: string;
  onSOAPGenerated?: (soapNote: SOAPGenerationResponse) => void;
  patientName?: string;
  isGenerating?: boolean;
}

export function SOAPNoteGenerator({ 
  transcription, 
  onSOAPGenerated, 
  patientName,
  isGenerating = false 
}: SOAPNoteGeneratorProps) {
  const [generatedSOAP, setGeneratedSOAP] = useState<SOAPGenerationResponse | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();

  const handleGenerateSOAP = async () => {
    if (!transcription.trim()) {
      setError('No transcription available to generate SOAP note');
      return;
    }

    // Validate transcription quality
    const validation = openaiSOAPService.validateTranscription(transcription);
    if (!validation.isValid) {
      setError(`Transcription quality issues: ${validation.issues.join(', ')}`);
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const soapResponse = await openaiSOAPService.generateSOAP({
        transcription,
        patientContext: patientName ? { id: 'temp', name: patientName } : undefined,
        visitType: 'General Consultation'
      });

      setGeneratedSOAP(soapResponse);
      if (onSOAPGenerated) {
        onSOAPGenerated(soapResponse);
      }

      toast({
        title: "SOAP Note Generated",
        description: "Successfully created SOAP note from transcription",
      });

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to generate SOAP note';
      setError(errorMessage);
      toast({
        title: "Generation Failed",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleCopySOAP = async () => {
    if (!generatedSOAP) return;

    const soapText = formatSOAPForCopy(generatedSOAP);
    try {
      await navigator.clipboard.writeText(soapText);
      toast({
        title: "Copied to Clipboard",
        description: "SOAP note copied successfully",
      });
    } catch (err) {
      toast({
        title: "Copy Failed",
        description: "Failed to copy SOAP note to clipboard",
        variant: "destructive",
      });
    }
  };

  const handleDownloadSOAP = () => {
    if (!generatedSOAP) return;

    const soapText = formatSOAPForCopy(generatedSOAP);
    const blob = new Blob([soapText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `soap-note-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "SOAP Note Downloaded",
      description: "File saved successfully",
    });
  };

  const formatSOAPForCopy = (soap: SOAPGenerationResponse): string => {
    return `SOAP NOTE
Generated: ${new Date(soap.generatedAt).toLocaleString()}
${patientName ? `Patient: ${patientName}` : ''}
Confidence: ${Math.round(soap.confidence * 100)}%

SUBJECTIVE:
${soap.soapNote.subjective}

OBJECTIVE:
${soap.soapNote.objective}

ASSESSMENT:
${soap.soapNote.assessment}

PLAN:
${soap.soapNote.plan}

${soap.warnings?.length ? `\nWARNINGS:\n${soap.warnings.join('\n')}` : ''}

---
This SOAP note was generated by AI and requires review and validation by a licensed healthcare provider.`;
  };

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 0.8) return 'bg-green-100 text-green-800';
    if (confidence >= 0.6) return 'bg-yellow-100 text-yellow-800';
    return 'bg-red-100 text-red-800';
  };

  const getConfidenceIcon = (confidence: number) => {
    if (confidence >= 0.8) return <CheckCircle className="h-4 w-4" />;
    return <AlertTriangle className="h-4 w-4" />;
  };

  if (!transcription.trim()) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileText className="h-5 w-5" />
            SOAP Note Generator
          </CardTitle>
          <CardDescription>
            Generate structured SOAP notes from conversation transcriptions
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Alert>
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>
              No transcription available. Start recording to generate a SOAP note.
            </AlertDescription>
          </Alert>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-4">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileText className="h-5 w-5" />
            SOAP Note Generator
          </CardTitle>
          <CardDescription>
            Generate structured SOAP notes from conversation transcriptions
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {error && (
            <Alert variant="destructive">
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          <div className="flex gap-2">
            <Button 
              onClick={handleGenerateSOAP}
              disabled={loading || isGenerating || !transcription.trim()}
              className="flex-1"
            >
              {loading || isGenerating ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  Generating SOAP Note...
                </>
              ) : (
                <>
                  <FileText className="h-4 w-4 mr-2" />
                  Generate SOAP Note
                </>
              )}
            </Button>

            {generatedSOAP && (
              <>
                <Button variant="outline" size="icon" onClick={handleCopySOAP}>
                  <Copy className="h-4 w-4" />
                </Button>
                <Button variant="outline" size="icon" onClick={handleDownloadSOAP}>
                  <Download className="h-4 w-4" />
                </Button>
              </>
            )}
          </div>

          {transcription && (
            <div>
              <h4 className="text-sm font-medium mb-2">Source Transcription:</h4>
              <Textarea 
                value={transcription} 
                readOnly 
                className="min-h-[100px] text-sm" 
                placeholder="Transcription will appear here..."
              />
            </div>
          )}
        </CardContent>
      </Card>

      {generatedSOAP && (
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle>Generated SOAP Note</CardTitle>
              <div className="flex items-center gap-2">
                <Badge className={getConfidenceColor(generatedSOAP.confidence)}>
                  {getConfidenceIcon(generatedSOAP.confidence)}
                  {Math.round(generatedSOAP.confidence * 100)}% Confidence
                </Badge>
              </div>
            </div>
            <CardDescription>
              Generated on {new Date(generatedSOAP.generatedAt).toLocaleString()}
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {generatedSOAP.warnings && generatedSOAP.warnings.length > 0 && (
              <Alert>
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription>
                  <strong>Warnings:</strong>
                  <ul className="list-disc list-inside mt-1">
                    {generatedSOAP.warnings.map((warning, index) => (
                      <li key={index}>{warning}</li>
                    ))}
                  </ul>
                </AlertDescription>
              </Alert>
            )}

            <div className="space-y-4">
              <div>
                <h3 className="font-semibold text-lg mb-2">SUBJECTIVE</h3>
                <p className="text-sm text-gray-700 whitespace-pre-wrap">
                  {generatedSOAP.soapNote.subjective}
                </p>
              </div>

              <Separator />

              <div>
                <h3 className="font-semibold text-lg mb-2">OBJECTIVE</h3>
                <p className="text-sm text-gray-700 whitespace-pre-wrap">
                  {generatedSOAP.soapNote.objective}
                </p>
              </div>

              <Separator />

              <div>
                <h3 className="font-semibold text-lg mb-2">ASSESSMENT</h3>
                <p className="text-sm text-gray-700 whitespace-pre-wrap">
                  {generatedSOAP.soapNote.assessment}
                </p>
              </div>

              <Separator />

              <div>
                <h3 className="font-semibold text-lg mb-2">PLAN</h3>
                <p className="text-sm text-gray-700 whitespace-pre-wrap">
                  {generatedSOAP.soapNote.plan}
                </p>
              </div>
            </div>

            <Alert>
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                <strong>Important:</strong> This SOAP note was generated by AI and requires review and validation by a licensed healthcare provider before use in patient care.
              </AlertDescription>
            </Alert>
          </CardContent>
        </Card>
      )}
    </div>
  );
}

export default SOAPNoteGenerator;